#!/usr/bin/env python3
"""
API Configuration Tool for Claude Agents Pipeline
Manages API keys and environment configuration
"""

import os
import sys
import json
import getpass
from pathlib import Path
from typing import Optional, Dict, Any
import argparse

class APIConfigurator:
    """Manage API keys and configuration for the pipeline"""
    
    def __init__(self):
        self.env_file = Path(".env")
        self.config_file = Path(".claude-agents-config.json")
        self.api_keys = {}
        
    def load_existing_config(self):
        """Load existing configuration from .env and config files"""
        # Load from .env
        if self.env_file.exists():
            with open(self.env_file, 'r') as f:
                for line in f:
                    line = line.strip()
                    if line and not line.startswith('#'):
                        if '=' in line:
                            key, value = line.split('=', 1)
                            self.api_keys[key] = value
        
        # Load from environment
        for key in ['OPENAI_API_KEY', 'CLAUDE_API_KEY']:
            if key in os.environ:
                self.api_keys[key] = os.environ[key]
    
    def prompt_for_api_key(self, key_name: str, description: str) -> Optional[str]:
        """Prompt user for an API key"""
        print(f"\n{'='*60}")
        print(f"üîë {key_name} Configuration")
        print(f"{'='*60}")
        print(f"\n{description}\n")
        
        # Check if already configured
        if key_name in self.api_keys and self.api_keys[key_name]:
            print(f"‚úÖ {key_name} is already configured")
            response = input("Do you want to update it? (y/n): ").lower()
            if response != 'y':
                return self.api_keys[key_name]
        
        # Prompt for key
        while True:
            api_key = getpass.getpass(f"Enter {key_name} (or 'skip' to skip): ")
            
            if api_key.lower() == 'skip':
                print(f"‚ö†Ô∏è  Skipping {key_name} configuration")
                return None
            
            if api_key:
                # Basic validation
                if key_name == "OPENAI_API_KEY" and not api_key.startswith("sk-"):
                    print("‚ö†Ô∏è  OpenAI API keys typically start with 'sk-'")
                    response = input("Continue anyway? (y/n): ").lower()
                    if response != 'y':
                        continue
                
                return api_key
            else:
                print("‚ùå API key cannot be empty")
    
    def save_config(self):
        """Save configuration to .env file"""
        # Update .env file
        lines = []
        existing_keys = set()
        
        # Read existing .env if it exists
        if self.env_file.exists():
            with open(self.env_file, 'r') as f:
                for line in f:
                    line = line.strip()
                    if line and not line.startswith('#'):
                        if '=' in line:
                            key, _ = line.split('=', 1)
                            if key in self.api_keys:
                                lines.append(f"{key}={self.api_keys[key]}")
                                existing_keys.add(key)
                            else:
                                lines.append(line)
                    else:
                        lines.append(line)
        
        # Add header if new file
        if not self.env_file.exists():
            lines.append("# Claude Agents Pipeline Configuration")
            lines.append("# Generated by configure_api.py")
            lines.append("")
        
        # Add new keys
        for key, value in self.api_keys.items():
            if key not in existing_keys and value:
                lines.append(f"{key}={value}")
        
        # Write .env file
        with open(self.env_file, 'w') as f:
            f.write('\n'.join(lines))
        
        print(f"\n‚úÖ Configuration saved to {self.env_file}")
    
    def test_openai_connection(self) -> bool:
        """Test OpenAI API connection"""
        api_key = self.api_keys.get('OPENAI_API_KEY')
        if not api_key:
            return False
        
        try:
            from openai import OpenAI
            client = OpenAI(api_key=api_key)
            # Just test client initialization
            print("‚úÖ OpenAI API key validated")
            return True
        except ImportError:
            print("‚ö†Ô∏è  OpenAI package not installed. Run: pip install openai")
            return False
        except Exception as e:
            print(f"‚ùå OpenAI API validation failed: {e}")
            return False
    
    def interactive_setup(self):
        """Run interactive setup process"""
        print("\n" + "="*60)
        print("üöÄ Claude Agents Pipeline - API Configuration")
        print("="*60)
        
        self.load_existing_config()
        
        # Configure OpenAI API (GPT-5)
        openai_key = self.prompt_for_api_key(
            "OPENAI_API_KEY",
            "This key is required for GPT-5 integration in the pipeline.\n"
            "GPT-5 enhances planning and evaluation phases.\n"
            "Get your API key from: https://platform.openai.com/api-keys"
        )
        
        if openai_key:
            self.api_keys['OPENAI_API_KEY'] = openai_key
            self.test_openai_connection()
        
        # Check Claude API key
        if 'CLAUDE_API_KEY' not in self.api_keys:
            print("\n‚ö†Ô∏è  CLAUDE_API_KEY not found")
            print("   This should be configured in your Claude Code settings")
            print("   The pipeline will use Claude Code's built-in authentication")
        
        # Save configuration
        if self.api_keys:
            self.save_config()
            
            # Export to current shell
            print("\nüìù To use in current session, run:")
            print("   source .env")
            
            print("\n‚ú® Configuration complete!")
        else:
            print("\n‚ö†Ô∏è  No API keys configured")
    
    def check_status(self):
        """Check current configuration status"""
        self.load_existing_config()
        
        print("\n" + "="*60)
        print("üîç Configuration Status")
        print("="*60)
        
        # Check OpenAI
        if 'OPENAI_API_KEY' in self.api_keys:
            print("\n‚úÖ OPENAI_API_KEY: Configured")
            if self.test_openai_connection():
                print("   Connection: Valid")
            else:
                print("   Connection: Failed")
        else:
            print("\n‚ùå OPENAI_API_KEY: Not configured")
            print("   GPT-5 features will be disabled")
        
        # Check Claude
        if 'CLAUDE_API_KEY' in self.api_keys:
            print("\n‚úÖ CLAUDE_API_KEY: Configured")
        else:
            print("\n‚ö†Ô∏è  CLAUDE_API_KEY: Not in .env")
            print("   Will use Claude Code's authentication")
        
        # Check files
        print(f"\nüìÅ Configuration files:")
        print(f"   .env: {'‚úÖ Exists' if self.env_file.exists() else '‚ùå Not found'}")
        print(f"   Agents: {'‚úÖ Installed' if Path('.claude/agents').exists() else '‚ùå Not installed'}")
        
def main():
    parser = argparse.ArgumentParser(description="Configure API keys for Claude Agents Pipeline")
    parser.add_argument('--check', action='store_true', help='Check current configuration')
    parser.add_argument('--set', metavar='KEY=VALUE', help='Set a specific API key')
    
    args = parser.parse_args()
    
    configurator = APIConfigurator()
    
    if args.check:
        configurator.check_status()
    elif args.set:
        # Set specific key
        if '=' in args.set:
            key, value = args.set.split('=', 1)
            configurator.load_existing_config()
            configurator.api_keys[key] = value
            configurator.save_config()
            print(f"‚úÖ {key} configured")
        else:
            print("‚ùå Invalid format. Use: --set KEY=VALUE")
    else:
        # Interactive setup
        configurator.interactive_setup()

if __name__ == "__main__":
    main()